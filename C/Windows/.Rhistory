a_t <- function(a.0, t.0, t, v){
#
#  Purpose:
#     Calculate the gradient parameter for the stochastic approximation
#
#  Input:
#     a.0 - The base gradient
#     t.0 - The first step where the gradient begins to decrease
#     t - The current step number
#     v - A parameter to adjust the rate at which the gradient decreases
#
#  Output:
#     The gradient parameter for the stochastic approximation
#
output <- a.0 * (t.0/max(t**v, t.0))
return(output)
}
b_t <- function(b.0, t.0, t, eta) {
#
#  Purpose:
#     Calculate the difference criterion for the truncation step
#
#  Input:
#     b.0 - The base difference criterion
#     t.0 - The first step where the difference criterion begins to decrease
#     t - The current step number
#     eta - A parameter to adjust the rate at which the difference criterion decreases
#
#  Output:
#     The difference criterion for the truncation step
#
output <- b.0 * (t.0/max(t, t.0))**eta
return(output)
}
rsa.iteration <- function(samp.i, Y, S, covars, m, theta, p, q, a, type) {
#
#  Purpose:
#     Calculate the updated parameter values for a single iteration of the stochastic approximation
#
#  Input:
#     samp.i - The indicies of the subsample in the full sample
#     Y - The response values from the full sample
#     S - The coordinate values from the full sample
#     covars - The covariate values from the full sample
#     m - The size of the subsample
#     theta - A list containing the current parameter values
#     p - The number of covariates + 1
#     q - The number of response variables
#     a - The current gradient parameter for the stochastic approximation
#     type - A string indicating which of the available covariance functions should be used
#
#  Output:
#     A list containing the updated parameter values
#
z <- Y[samp.i,]
s <- S[samp.i,]
c <- covars[samp.i,]
if (!is.matrix(z)) z <- matrix(z, ncol = 1)
if (!is.matrix(c)) c <- matrix(c, ncol = 1)
B <- theta[[1]]
Sigma <- theta[[2]]
phi <- exp(theta[[3]])
tau2 <- exp(theta[[4]])
U <- theta[[5]]
M  <- mu(c, B)
R <- calcKR(s, s, phi = phi, type = type)
dAdphi  <- calcKDerivR(s, s, phi = phi, type = type)
A <- R + tau2 * diag(1, m, m)
Sigma.inv <- solve(Sigma)
A.inv <- solve(A)
mat1 <- t((z - M)) %*% A.inv
mat2 <- A.inv %*% (z - M)
H.theta <- vector(mode = "list", length = 4)
H.theta[[1]] <- H.B(c, z, M, A.inv, Sigma.inv)
H.theta[[2]] <- H.U(U, Sigma.inv, mat1, z, M, m)
H.theta[[3]] <- H.phi(A.inv, dAdphi, Sigma.inv, mat1, mat2, q)
H.theta[[4]] <- H.tau2(Sigma.inv, mat1, mat2, q, A.inv)
theta.half <- theta
theta.half[[1]] <- B + a * H.theta[[1]]
theta.half[[5]] <- U + a * H.theta[[2]]
theta.half[[2]] <- t(theta.half[[5]]) %*% theta.half[[5]]
theta.half[[3]] <- theta[[3]] * exp(a * theta[[3]] * H.theta[[3]])
theta.half[[4]] <- theta[[4]] * exp(a * theta[[4]] * H.theta[[4]])
theta.half[[5]] <- chol(theta.half[[2]])
return(theta.half)
}
RSA.parallel.multi <- function(Y, S, covars = NULL, m , K_pi, t.0, a_t, a.0, v, b_t, b.0, eta, J, parallel = FALSE, cores = NULL, max.iter = 2500, type = c("Exp", "MatThreeTwo")){
#
#  Purpose:
#     Perform population resampling-based stochastic approximation to estimate parameter values for
#     a gaussian process regression
#
#  Input:
#     Y - The response values from the full sample
#     S - The coordinate values from the full sample
#     covars - The covariate values from the full sample
#     m - The size of the subsamples to be used
#     K_pi - The function to be used when defining the compact set
#     t.0 - The step number when the gradient/difference criterion parameters start decreasing
#     a_t - The function to be used to calculate the gradient parameter for the stochastic approximation
#     a.0 - The initial gradient parameter for the stochastic approximation
#     v -  A parameter to adjust the rate at which the gradient decreases
#     b_t - The function to be used to calculate the difference criterion for the truncation step
#     b.0 - The initial difference criterion for the truncation step
#     eta -  A parameter to adjust the rate at which the difference criterion decreases
#     J - The number of parallel chains which should be evaluated
#     parallel - A logical value indicating whether to use R's parallel backend.
#                Defaults to FALSE however the function is likely to be much faster with the parallel when
#                m is large(ie. >250) and J>1
#     cores - The number of parallel processors to be used if using the parallel backend
#     max.iter - The total number of iterations of the stochastic approximation which should be performed
#     type - A string indicating which of the available covariance functions should be used
#
#  Output:
#     A list containing:
#                       trace - A matrix whose ith row contains the parameter estimates at the ith iteration
#                       B - The parameters for the mean function
#                       Sigma - The the current covariance matrix(response)
#                       phi - The covariance function parameter phi
#                       tau2 - The covariance function parameter tau2
#
type <- match.arg(type)
if (parallel == TRUE) {
require(parallel)
require(foreach)
require(doParallel)
cl <- makeCluster(cores)
if (.Platform$OS.type == "unix") {
clusterCall(cl, function() dyn.load(paste("C/Unix/calcK", type, "2r.so", sep = "")))
clusterCall(cl, function() dyn.load(paste("C/Unix/calcK", type, "2Derivr.so", sep = "")))
clusterCall(cl, function() dyn.load("C/Unix/distMat2R.so"))
} else {
clusterCall(cl, function() dyn.load(paste("C/Windows/calcK", type, "2r.dll", sep = "")))
clusterCall(cl, function() dyn.load(paste("C/Windows/calcK", type, "2Derivr.dll", sep = "")))
clusterCall(cl, function() dyn.load("C/Windows/distMat2R.dll"))
}
registerDoParallel(cl)
} else {
if (.Platform$OS.type == "unix") {
dyn.load(paste("C/Unix/calcK", type, "2r.so", sep = ""))
dyn.load(paste("C/Unix/calcK", type, "2Derivr.so", sep = ""))
dyn.load("C/Unix/distMat2R.so")
} else {
dyn.load(paste("C/Windows/calcK", type, "2r.dll", sep = ""))
dyn.load(paste("C/Windows/calcK", type, "2Derivr.dll", sep = ""))
dyn.load("C/Windows/distMat2R.dll")
}
t <- 0
n <- nrow(Y)
covars <- cbind(rep(1, n), covars)
p <- ncol(covars)
q <- ncol(Y)
pi_t <- 0
a_t <- get(a_t, mode = "function")
b_t <- get(b_t, mode = "function")
K_pi <- get(K_pi, mode = "function")
K.0 <- do.call(K_pi, list(pi_t = pi_t))
K.t <- K.0
theta <- reinitialise(K.0, p, q)
thetas.cols <- (2*p*q + q**2 + q + 4)/2
thetas <- matrix(ncol = thetas.cols, nrow = max.iter + 1)
thetas[1,] <- c(theta[[1]], theta[[2]][upper.tri(theta[[2]], TRUE)], theta[[3]], theta[[4]])
pb = txtProgressBar(min = 0, max = max.iter, initial = 0, style = 3)
repeat {
samples <- matrix(NA, ncol = J, nrow = m)
for (j in 1:J) {
samples[,j] <- sample.int(n = n, size = m, replace = FALSE)
}
a <- do.call(a_t, list(a.0 = a.0, t.0 = t.0, t = t, v = v))
if (parallel == TRUE) {
theta.half <- foreach(j = 1:J, .combine = function(u, v) {return(mapply(`+`, u, v))}, .export = c("rsa.iteration", "calcKR", "calcKDerivR", "H.B", "H.phi", "H.tau2", "H.Sigma", "mu", "euclid.dist")) %dopar% {
rsa.iteration(samples[,j], Y, S, covars, m, theta, p, q, a, type)
}
theta.half <- lapply(theta.half, function(X) {return(X/J)})
} else {
theta.half = 0
for (j in 1:J) {
theta.half <- mapply(`+`, theta.half, rsa.iteration(samples[,j], Y, S, covars, m, theta, p, q, a, type))
}
theta.half <- lapply(theta.half, function(X) {return(X/J)})
}
b <- do.call(b_t, list(b.0 = b.0, t.0 = t.0, t = t, eta = eta))
in.K.t <- in.Kspace(theta.half[[1]], theta.half[[2]], theta.half[[3]], theta.half[[4]], K.t)
if (in.K.t && (euclid.dist(matrix(unlist(theta[1:4]), nrow = 1), matrix(unlist(theta.half[1:4]), nrow = 1))[1,1] <= b)) {
theta <- theta.half
} else {
theta <- reinitialise(K.0, p, q)
pi_t <- pi_t + 1
K.t <- do.call(K_pi, list(pi_t = pi_t))
}
t <- t + 1
setTxtProgressBar(pb,t)
thetas[t + 1,] <- c(theta[[1]], theta[[2]][upper.tri(theta[[2]], TRUE)], exp(theta[[3]]), exp(theta[[4]]))
if (t >= max.iter) {
if (parallel == TRUE) {
if (.Platform$OS.type == "unix") {
clusterCall(cl, function() dyn.unload(paste("C/Unix/calcK", type, "2r.so", sep = "")))
clusterCall(cl, function() dyn.unload(paste("C/Unix/calcK", type, "2Derivr.so", sep = "")))
clusterCall(cl, function() dyn.unload("C/Unix/distMat2R.so"))
} else {
clusterCall(cl, function() dyn.unload(paste("C/Windows/calcK", type, "2r.dll", sep = "")))
clusterCall(cl, function() dyn.unload(paste("C/Windows/calcK", type, "2Derivr.dll", sep = "")))
clusterCall(cl, function() dyn.unload("C/Windows/distMat2R.dll"))
}
stopCluster(cl)
} else {
if (.Platform$OS.type == "unix") {
dyn.unload(paste("C/Unix/calcK", type, "2r.so", sep = ""))
dyn.unload(paste("C/Unix/calcK", type, "2Derivr.so", sep = ""))
dyn.unload("C/Unix/distMat2R.so")
} else {
dyn.unload(paste("C/Windows/calcK", type, "2r.dll", sep = ""))
dyn.unload(paste("C/Windows/calcK", type, "2Derivr.dll", sep = ""))
dyn.unload("C/Windows/distMat2R.dll")
}
return(list(trace = thetas, B = theta[[1]], Sigma = theta[[2]], phi = exp(theta[[3]]), tau2 = exp(theta[[4]])))
}
predict.rsa.multi.local <- function(s.train, x.train, y.train, S = s.train, X = x.train, B, Sigma, phi, tau2, delta, type){
#
#  Purpose:
#     Calculate predicted mean covariance functions of a Gaussian process
#
#  Input:
#     s.train - The coordinate values to be used for kriging
#     x.train - The covariate values to be used for kriging
#     s.train - The response values to be used for kriging
#     S - The new coordinate values where the functions are to be evaluated
#     X - The covariate values at the new coordinates
#     B - The parameters for the mean function
#     Sigma - The the current covariance matrix(response)
#     phi - The covariance function parameter phi
#     tau2 - The covariance function parameter tau2
#     type - A string indicating which of the available covariance functions should be used
#
#  Output:
#     A list containing the predicted mean function values  predicted covariance function values
#
if (.Platform$OS.type == "unix") {
dyn.load(paste("C/Unix/calcK", type, "2r.so", sep = ""))
dyn.load(paste("C/Unix/calcK", type, "2Derivr.so", sep = ""))
dyn.load("C/Unix/distMat2R.so")
} else {
dyn.load(paste("C/Windows/calcK", type, "2r.dll", sep = ""))
dyn.load(paste("C/Windows/calcK", type, "2Derivr.dll", sep = ""))
dyn.load("C/Windows/distMat2R.dll")
}
D <- euclid.dist(X1 = s.train, X2 = S)
n2 <- nrow(S)
pred.mean <- matrix(NA, nrow = n2, ncol = ncol(y.train))
pred.var <- matrix(NA, nrow = n2, ncol = ncol(y.train))
for (i in 1:n2) {
loc.train <- which(D[,i] < delta)
loc.s.train <- s.train[loc.train,]
loc.x.train <- x.train[loc.train,]
loc.y.train <- y.train[loc.train,]
m <- length(loc.train)
if (m == 1) {
loc.s.train <- matrix(loc.s.train, nrow = 1)
loc.x.train <- matrix(loc.x.train, nrow = 1)
loc.y.train <- matrix(loc.y.train, nrow = 1)
}
DesMat.train <- cbind(rep(1, m), loc.x.train)
DesMat.X <- cbind(1, matrix(X[i,], nrow = 1))
mean.func.train <- mu(DesMat.train, B)
mean.func.X <- mu(DesMat.X, B)
A.st_t <- calcKR(matrix(S[i,], nrow = 1), loc.s.train, phi, type)
A.t_st <- calcKR(loc.s.train, matrix(S[i,], nrow = 1), phi, type)
A.st_st <- calcKR(matrix(S[i,], nrow = 1), matrix(S[i,], nrow = 1), phi, type)
A.t_t <- calcKR(loc.s.train, loc.s.train, phi, type)
A <- A.t_t + tau2 * diag(1, m, m)
resids <- loc.y.train - mean.func.train
K.st_t <- kronecker(Sigma, A.st_t)
K.t_st <- kronecker(Sigma, A.t_st)
K.st_st <- kronecker(Sigma, A.st_st)
K.chol <- t(kronecker(t(chol(Sigma)), t(chol(A))))
K.inv <- chol2inv(K.chol)
mean.func.X <- as.vector(mean.func.X)
resids <- as.vector(resids)
pred.mean[i,] <- mean.func.X + K.st_t %*% K.inv %*% resids
pred.var[i,] <- diag((K.st_st - K.st_t %*% K.inv %*% K.t_st))
}
if (.Platform$OS.type == "unix") {
dyn.unload(paste("C/Unix/calcK", type, "2r.so", sep = ""))
dyn.unload(paste("C/Unix/calcK", type, "2Derivr.so", sep = ""))
dyn.unload("C/Unix/distMat2R.so")
} else {
dyn.unload(paste("C/Windows/calcK", type, "2r.dll", sep = ""))
dyn.unload(paste("C/Windows/calcK", type, "2Derivr.dll", sep = ""))
dyn.unload("C/Windows/distMat2R.dll")
}
return(list(pred.mean = pred.mean, pred.var = pred.var))
}
rsa <- RSA.parallel.multi(matrix(test.area.4[,3], ncol = 1), test.area.4[,1:2], matrix(test.area.4[, 4], ncol = 1), 100, "K_pi", 100, "a_t", 0.001, 0.55, "b_t", 100, 0.55, 1, FALSE, NULL, 2500, "Exp")
rsa
rsa <- RSA.parallel.multi(matrix(test.area.4[,3], ncol = 1), test.area.4[,1:2], matrix(test.area.4[, 4], ncol = 1), 100, "K_pi", 100, "a_t", 0.001, 0.55, "b_t", 100, 0.55, 5, FALSE, NULL, 2500, "Exp")
rsa
rsa.pred <- predict.rsa.multi.local(test.area.4[,1:2], matrix(test.area.4[, 4], ncol = 1), matrix(test.area.4[,3], ncol = 1), test.area.4[,1:2], matrix(test.area.4[, 4], ncol = 1), rsa$B, rsa$Sigma, rsa$phi, rsa$tau2, 20, "Exp")
fields::quilt.plot(matrix(test.area.19[, 1], ncol = 1), matrix(test.area.19[, 2], ncol = 1), rsa.pred$pred.mean)
fields::quilt.plot(matrix(test.area.4[, 1], ncol = 1), matrix(test.area.4[, 2], ncol = 1), rsa.pred$pred.mean)
fields::quilt.plot(matrix(test.area.4[, 1], ncol = 1), matrix(test.area.4[, 2], ncol = 1), matrix(test.area.4[, 3], ncol = 1))
fields::quilt.plot(matrix(test.area.4[, 1], ncol = 1), matrix(test.area.4[, 2], ncol = 1), rsa.pred$pred.mean - matrix(test.area.4[, 3], ncol = 1))
fields::quilt.plot(matrix(test.area.4[, 1], ncol = 1), matrix(test.area.4[, 2], ncol = 1), (rsa.pred$pred.mean - matrix(test.area.4[, 3], ncol = 1))**2)
mean((rsa.pred$pred.mean - matrix(test.area.4[, 3], ncol = 1))**2)
sqrt(mean((rsa.pred$pred.mean - matrix(test.area.4[, 3], ncol = 1))**2))
rsa <- RSA.parallel.multi(matrix(test.area.4[,3], ncol = 1), test.area.4[,1:2], matrix(test.area.4[, 4], ncol = 1), 100, "K_pi", 100, "a_t", 0.001, 0.55, "b_t", 100, 0.55, 5, FALSE, NULL, 1000, "Exp")
rsa
rsa.pred <- predict.rsa.multi.local(test.area.4[,1:2], matrix(test.area.4[, 4], ncol = 1), matrix(test.area.4[,3], ncol = 1), test.area.4[,1:2], matrix(test.area.4[, 4], ncol = 1), rsa$B, rsa$Sigma, rsa$phi, rsa$tau2, 20, "Exp")
rsa
mean((rsa.pred$pred.mean - matrix(test.area.4[, 3], ncol = 1))**2)
rsa <- RSA.parallel.multi(matrix(test.area.4[,3], ncol = 1), test.area.4[,1:2], matrix(test.area.4[, 4], ncol = 1), 100, "K_pi", 100, "a_t", 0.001, 0.55, "b_t", 100, 0.55, 1, FALSE, NULL, 1000, "Exp")
rsa
mean((rsa.pred$pred.mean - matrix(test.area.4[, 3], ncol = 1))**2)
42/1.778
42/1.78
42.64/1.78
pb = txtProgressBar(min = 0, max = 20, initial = 0, style = 3)
theta.true <- c(1, 1, 25, 1, 1)
threads <- c(1, 5)
theta.ests <- vector(mode = "list", length = 20)
for (j in 1:2) {
set.seed(123)
for (i in 1:10) {
eval(parse(text = paste("theta.est <- RSA.parallel.multi(matrix(test.area.", i, "[,3], ncol = 1), test.area.", i, "[,1:2], matrix(test.area.", i, "[,4], ncol = 1), 100, \"K_pi\", 50, \"a_t\", 0.1, 0.55, \"b_t\", 100, 0.55, ", threads[j], ", 2500)", sep = "")))
v <- ((j - 1) * 10) + i
theta.ests[[v]] <- theta.est
setTxtProgressBar(pb,v)
}
pb = txtProgressBar(min = 0, max = 20, initial = 0, style = 3)
theta.true <- c(1, 1, 1, 25, 1)
threads <- c(1, 5)
theta.ests <- vector(mode = "list", length = 20)
for (j in 1:2) {
set.seed(123)
for (i in 1:10) {
eval(parse(text = paste("theta.est <- RSA.parallel.multi(matrix(test.area.", i, "[,3], ncol = 1), test.area.", i, "[,1:2], matrix(test.area.", i, "[,4], ncol = 1), 100, \"K_pi\", 50, \"a_t\", 0.1, 0.55, \"b_t\", 100, 0.55, ", threads[j], ")", sep = "")))
v <- ((j - 1) * 10) + i
theta.ests[[v]] <- theta.est
setTxtProgressBar(pb,v)
}
MSEs.big.1 <- matrix(NA, ncol = 5, nrow = 2501)
for (i in 1:2501) {
for (j in 1:5) {
MSEs.big.1[i,j] <- mean(sapply(theta.ests[1:10], function(x) return((x$trace[i,j] - theta.true[j])**2)))
}
MSEs.big.5 <- matrix(NA, ncol = 5, nrow = 2501)
for (i in 1:2501) {
for (j in 1:5) {
MSEs.big.5[i,j] <- mean(sapply(theta.ests[11:20], function(x) return((x$trace[i,j] - theta.true[j])**2)))
}
std.errs.big.1 <- matrix(NA, ncol = 5, nrow = 2501)
for (i in 1:2501) {
for (j in 1:5) {
std.errs.big.1[i,j] <- sd(sapply(theta.ests[1:10], function(x) return(x$trace[i,j])))/10
}
std.errs.big.5 <- matrix(NA, ncol = 5, nrow = 2501)
for (i in 1:2501) {
for (j in 1:5) {
std.errs.big.5[i,j] <- sd(sapply(theta.ests[11:20], function(x) return(x$trace[i,j])))/10
}
MSEs.big.1.rat <- matrix(NA, ncol = 1, nrow = 2501)
for (i in 1:2501) {
MSEs.big.1.rat[i,] <- mean(sapply(theta.ests[1:10], function(x) return((x$trace[i,4]/x$trace[i,3] - 25)**2)))
}
MSEs.big.5.rat <- matrix(NA, ncol = 1, nrow = 2501)
for (i in 1:2501) {
MSEs.big.5.rat[i,] <- mean(sapply(theta.ests[11:20], function(x) return((x$trace[i,4]/x$trace[i,3] - 25)**2)))
}
plot(MSEs.big.1[,1])
plot(MSEs.big.1[,2])
theta.ests
plot(MSEs.big.1[,3])
plot(MSEs.big.1[,4])
plot(MSEs.big.1[,4], ylim = c(0,1))
plot(MSEs.big.1[,4], ylim = c(0,100))
plot(MSEs.big.1[,4], ylim = c(0,1000))
plot(MSEs.big.1[,4], ylim = c(0,10000))
plot(MSEs.big.5[,1])
plot(MSEs.big.5[,3])
RSA.parallel.multi
rsa.iteration()
rsa.iteration
plot(MSEs.big.5[,1])
plot(MSEs.big.5[,2])
MSEs.big.5[,2]
sapply(theta.ests[1:10], function(x) return((x$trace[995,2] - theta.true[2])**2))
mean(sapply(theta.ests[1:10], function(x) return((x$trace[995,2] - theta.true[2])**2)))
mean(sapply(theta.ests[1:10], function(x) return((x$trace[995,1] - theta.true[1])**2)))
mean(sapply(theta.ests[11:2], function(x) return((x$trace[995,2] - theta.true[2])**2)))
mean(sapply(theta.ests[11:20], function(x) return((x$trace[995,2] - theta.true[2])**2)))
theta.ests[[1]]$trace
pb = txtProgressBar(min = 0, max = 100, initial = 0, style = 3)
theta.true <- c(1, 1, 1, 25, 1)
threads <- c(1, 5)
theta.ests <- vector(mode = "list", length = 100)
for (j in 1:2) {
set.seed(123)
for (i in 1:50) {
eval(parse(text = paste("theta.est <- RSA.parallel.multi(matrix(test.area.", i, "[,3], ncol = 1), test.area.", i, "[,1:2], matrix(test.area.", i, "[,4], ncol = 1), 100, \"K_pi\", 50, \"a_t\", 0.1, 0.55, \"b_t\", 100, 0.55, ", threads[j], ")", sep = "")))
v <- ((j - 1) * 50) + i
theta.ests[[v]] <- theta.est
setTxtProgressBar(pb,v)
}
MSEs.big.1 <- matrix(NA, ncol = 5, nrow = 2501)
for (i in 1:2501) {
for (j in 1:5) {
MSEs.big.1[i,j] <- mean(sapply(theta.ests[1:50], function(x) return((x$trace[i,j] - theta.true[j])**2)))
}
MSEs.big.5 <- matrix(NA, ncol = 5, nrow = 2501)
for (i in 1:2501) {
for (j in 1:5) {
MSEs.big.5[i,j] <- mean(sapply(theta.ests[11:20], function(x) return((x$trace[i,j] - theta.true[j])**2)))
}
std.errs.big.1 <- matrix(NA, ncol = 5, nrow = 2501)
for (i in 1:2501) {
for (j in 1:5) {
std.errs.big.1[i,j] <- sd(sapply(theta.ests[1:10], function(x) return(x$trace[i,j])))/10
}
std.errs.big.5 <- matrix(NA, ncol = 5, nrow = 2501)
for (i in 1:2501) {
for (j in 1:5) {
std.errs.big.5[i,j] <- sd(sapply(theta.ests[11:20], function(x) return(x$trace[i,j])))/10
}
MSEs.big.1.rat <- matrix(NA, ncol = 1, nrow = 2501)
for (i in 1:2501) {
MSEs.big.1.rat[i,] <- mean(sapply(theta.ests[1:10], function(x) return((x$trace[i,4]/x$trace[i,3] - 25)**2)))
}
MSEs.big.5.rat <- matrix(NA, ncol = 1, nrow = 2501)
for (i in 1:2501) {
MSEs.big.5.rat[i,] <- mean(sapply(theta.ests[11:20], function(x) return((x$trace[i,4]/x$trace[i,3] - 25)**2)))
}
plot(MSEs.big.5[,1])
plot(MSEs.big.5[,1], type = "l")
pb = txtProgressBar(min = 0, max = 100, initial = 0, style = 3)
theta.true <- c(1, 1, 1, 25, 1)
threads <- c(1, 5)
theta.ests <- vector(mode = "list", length = 100)
for (j in 1:2) {
set.seed(123)
for (i in 1:50) {
eval(parse(text = paste("theta.est <- RSA.parallel.multi(matrix(test.area.", i, "[,3], ncol = 1), test.area.", i, "[,1:2], matrix(test.area.", i, "[,4], ncol = 1), 100, \"K_pi\", 50, \"a_t\", 0.001, 0.55, \"b_t\", 100, 0.55, ", threads[j], ")", sep = "")))
v <- ((j - 1) * 50) + i
theta.ests[[v]] <- theta.est
setTxtProgressBar(pb,v)
}
MSEs.big.1 <- matrix(NA, ncol = 5, nrow = 2501)
for (i in 1:2501) {
for (j in 1:5) {
MSEs.big.1[i,j] <- mean(sapply(theta.ests[1:50], function(x) return((x$trace[i,j] - theta.true[j])**2)))
}
MSEs.big.5 <- matrix(NA, ncol = 5, nrow = 2501)
for (i in 1:2501) {
for (j in 1:5) {
MSEs.big.5[i,j] <- mean(sapply(theta.ests[11:20], function(x) return((x$trace[i,j] - theta.true[j])**2)))
}
std.errs.big.1 <- matrix(NA, ncol = 5, nrow = 2501)
for (i in 1:2501) {
for (j in 1:5) {
std.errs.big.1[i,j] <- sd(sapply(theta.ests[1:10], function(x) return(x$trace[i,j])))/10
}
std.errs.big.5 <- matrix(NA, ncol = 5, nrow = 2501)
for (i in 1:2501) {
for (j in 1:5) {
std.errs.big.5[i,j] <- sd(sapply(theta.ests[11:20], function(x) return(x$trace[i,j])))/10
}
MSEs.big.1.rat <- matrix(NA, ncol = 1, nrow = 2501)
for (i in 1:2501) {
MSEs.big.1.rat[i,] <- mean(sapply(theta.ests[1:10], function(x) return((x$trace[i,4]/x$trace[i,3] - 25)**2)))
}
MSEs.big.5.rat <- matrix(NA, ncol = 1, nrow = 2501)
for (i in 1:2501) {
MSEs.big.5.rat[i,] <- mean(sapply(theta.ests[11:20], function(x) return((x$trace[i,4]/x$trace[i,3] - 25)**2)))
}
plot(MSEs.big.5[,1], type = "l")
plot(MSEs.big.1[,1], type = "l")
lines(MSEs.big.5[,1], col = "green")
plot(MSEs.big.1[,2], type = "l")
lines(MSEs.big.5[,2], col = "green")
plot(MSEs.big.1[,5], type = "l")
plot(MSEs.big.5[,2], type = "l")
plot(MSEs.big.1[,5], type = "l")
lines(MSEs.big.5[,5], col = "green")
MSEs.big.1
plot(MSEs.big.1[,5], type = "l", ylim = c(0, 0.1))
plot(MSEs.big.1[,5], type = "l", ylim = c(0, 0.2))
plot(MSEs.big.1[,5], type = "l", ylim = c(0, 0.3))
plot(MSEs.big.1[,2], type = "l", ylim = c(0, 0.3))
plot(MSEs.big.1[,2], type = "l", ylim = c(0, 0.1))
plot(MSEs.big.1[,2], type = "l", ylim = c(0, 0.03))
plot(MSEs.big.1[,2], type = "l", ylim = c(0, 0.01))
lines(MSEs.big.5[,2], col = "green")
ls()
ls()[1:29]
rm(list = ls()[1:29])
ls()[1:29]
ls()
ls()[51:55]
rm(list = ls()[51:55])
ls()
source('C:/Users/kiera/Dropbox/Dropbox/LMS_Kieran/Code/RSA/RSA_Parallel.r', echo=TRUE)
source('C:/Users/kiera/Dropbox/Dropbox/LMS_Kieran/Code/RSA/RSA.r', echo=TRUE)
source('C:/Users/kiera/Dropbox/Dropbox/LMS_Kieran/Code/RSA/RSA_Parallel.r', echo=TRUE)
setwd("C:/Users/kiera/Dropbox/Dropbox/LMS_Kieran/Code/C/Windows")
rsa <- RSA.parallel(matrix(test.area.4[,3], ncol = 1), test.area.4[,1:2], matrix(test.area.4[, 4], ncol = 1), 100, "K_pi", 100, "a_t", 0.001, 0.55, "b_t", 100, 0.55, 1, FALSE, NULL, 1000, "Exp")
rsa <- RSA.parallel(matrix(test.area.4[,3], ncol = 1), test.area.4[,1:2], matrix(test.area.4[, 4], ncol = 1), 100, "K_pi", 100, "a_t", 0.001, 0.55, "b_t", 100, 0.55, 1, FALSE, NULL, 2500)
source('C:/Users/kiera/Dropbox/Dropbox/LMS_Kieran/Code/C/calcK_Cwrappers.r', echo=TRUE)
rsa <- RSA.parallel(matrix(test.area.4[,3], ncol = 1), test.area.4[,1:2], matrix(test.area.4[, 4], ncol = 1), 100, "K_pi", 100, "a_t", 0.001, 0.55, "b_t", 100, 0.55, 1, FALSE, NULL, 2500)
source('C:/Users/kiera/Dropbox/Dropbox/LMS_Kieran/Code/RSA/RSA_Parallel.r', echo=TRUE)
rsa <- RSA.parallel(matrix(test.area.4[,3], ncol = 1), test.area.4[,1:2], matrix(test.area.4[, 4], ncol = 1), 100, "K_pi", 100, "a_t", 0.001, 0.55, "b_t", 100, 0.55, 1, FALSE, NULL, 2500)
source('C:/Users/kiera/Dropbox/Dropbox/LMS_Kieran/Code/RSA/RSA_Parallel.r', echo=TRUE)
rsa <- RSA.parallel(matrix(test.area.4[,3], ncol = 1), test.area.4[,1:2], matrix(test.area.4[, 4], ncol = 1), 100, "K_pi", 100, "a_t", 0.001, 0.55, "b_t", 100, 0.55, 1, FALSE, NULL, 2500)
source('C:/Users/kiera/Dropbox/Dropbox/LMS_Kieran/Code/C/calcK_Cwrappers.r', echo=TRUE)
rsa <- RSA.parallel(matrix(test.area.4[,3], ncol = 1), test.area.4[,1:2], matrix(test.area.4[, 4], ncol = 1), 100, "K_pi", 100, "a_t", 0.001, 0.55, "b_t", 100, 0.55, 1, FALSE, NULL, 2500)
